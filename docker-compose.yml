version: '3.8'

services:

  db:
    image: mysql:8.1.0
    container_name: c-db
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      MYSQL_DATABASE: klines_history
      MYSQL_ROOT_PASSWORD: password
    ports:
      - '3306:3306'
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - klines-data:/var/lib/mysql
    networks:
      - cryptobot-network

  data:
    image: cryptobot/training-data:dev
    container_name: c-training-data
    build:
      context: ${PWD}
      dockerfile: ./data/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      KLINESDB_HOST: db
      KLINESDB_USER: root
      KLINESDB_PASSWORD: password
      KLINESDB_DBNAME: klines_history
      KLINES_MAX_RECORDS_PER_SYTS: 5000
    networks:
      - cryptobot-network

  model-fit:
    image: cryptobot/model-fit:dev
    container_name: c-model-fit
    build:
      context: ${PWD}
      dockerfile: ./model/Dockerfile.model-fit
    volumes:
      - model_fit:/src/model_fit
    environment:
      KLINESDB_HOST: db
      KLINESDB_USER: root
      KLINESDB_PASSWORD: password
      KLINESDB_DBNAME: klines_history
    depends_on:
      data:
        condition: service_completed_successfully
    networks:
      - cryptobot-network

  model-serve:
      image: cryptobot/model-serve:dev
      container_name: c-model-serve
      build:
        context: ${PWD}
        dockerfile: ./model/Dockerfile.model-serve
        args:
          MODEL_SRC: model/train.py
      depends_on:
        model-fit:
          condition: service_completed_successfully
      command:
        - --model_config_file=/models/models.config
        - --model_config_file_poll_wait_seconds=60
      ports:
        - 8501:8501
      volumes:
        - model_fit:/models/
      networks:
        - cryptobot-network

  requester:
    image: cryptobot/requester:dev
    container_name: c-requester
    build:
      context: ${PWD}
      dockerfile: ./requester/Dockerfile
    environment:
      MYSQL_HOST_KLINES: db
      MYSQL_USER_KLINES: root
      MYSQL_DATABASE_KLINES: klines_history
      MYSQL_PASSWORD_KLINES: password
      MYSQL_HOST_PREDICTIONS: db
      MYSQL_USER_PREDICTIONS: root
      MYSQL_DATABASE_PREDICTIONS: klines_history
      MYSQL_PASSWORD_PREDICTIONS: password
      PREDICT_SERVER_HOST: model-serve:8501
    entrypoint: /bin/bash
    command:
      - -c
      - |
        cd /app
        while true
        do
            timeteps=('minutely' 'hourly' 'daily' 'weekly')
            for TIMESTEP in $${timeteps[*]}
            do
                TIMESTEP=$$TIMESTEP ./entrypoint.sh
            done
            sleep 60
        done
    depends_on:
      db:
        condition: service_healthy
      model-fit:
        condition: service_completed_successfully
    volumes:
      - ${PWD}/requester:/app
    networks:
      - cryptobot-network

  web-api:
    image: cryptobot/web-api:dev
    container_name: c-web-api
    build:
      context: ${PWD}
      dockerfile: ./web_api/Dockerfile
    environment:
      MYSQL_HOST_PREDICTIONS: db
      MYSQL_USER_PREDICTIONS: root
      MYSQL_DATABASE_PREDICTIONS: klines_history
      MYSQL_PASSWORD_PREDICTIONS: password
    entrypoint: uvicorn
    command: main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    volumes:
      - ${PWD}/web_api:/app
    networks:
      - cryptobot-network
    depends_on:
      db:
        condition: service_healthy

volumes:
  klines-data:
    name: klines-data
  model_fit:
    name: model_fit

networks:
  cryptobot-network:
    external: false