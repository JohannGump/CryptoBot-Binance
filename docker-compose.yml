version: '3.8'
services:

  wait-for-db:
    image: atkrad/wait4x:latest
    container_name: c-wait-for-db
    command: tcp db:3306 -t 30s -i 250ms
    networks:
      - cryptobot-network
  
  wait-model-serve:
    image: atkrad/wait4x:latest
    container_name: c-wait-model-serve
    depends_on:
      model-fit:
        condition: service_completed_successfully
    command: http http://model-serve:8501/v1/models/minutely --expect-status-code 200
    networks:
      - cryptobot-network

  db:
    image: mysql:8.1.0
    container_name: c-db
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      MYSQL_DATABASE: klines_history
      MYSQL_ROOT_PASSWORD: password
    ports:
      - '3306:3306'
    volumes:
      - klines-data:/var/lib/mysql
    networks:
      - cryptobot-network

  data:
    image: cryptobot/training-data:dev
    container_name: c-training-data
    build:
      context: .
      dockerfile: ./data/Dockerfile
    depends_on:
      wait-for-db:
        condition: service_completed_successfully
    environment:
      KLINESDB_HOST: db
      KLINESDB_USER: root
      KLINESDB_PASSWORD: password
      KLINESDB_DBNAME: klines_history
      KLINES_MAX_RECORDS_PER_SYTS: 5000
    networks:
      - cryptobot-network

  model-fit:
    image: cryptobot/model-fit:dev
    container_name: c-model-fit
    build:
      context: .
      dockerfile: ./model/Dockerfile.model-fit
    volumes:
      - model_fit:/src/model_fit
    environment:
      KLINESDB_HOST: db
      KLINESDB_USER: root
      KLINESDB_PASSWORD: password
      KLINESDB_DBNAME: klines_history
    depends_on:
      data:
        condition: service_completed_successfully
    networks:
      - cryptobot-network

  model-serve:
      image: cryptobot/model-serve:dev
      container_name: c-model-serve
      build:
        context: .
        dockerfile: ./model/Dockerfile.model-serve
        args:
          MODEL_SRC: model/train.py
      depends_on:
        model-fit:
          condition: service_completed_successfully
      command:
        - --model_config_file=/models/models.config
        - --model_config_file_poll_wait_seconds=60
      ports:
        - 8501:8501
      volumes:
        - model_fit:/models/
      networks:
        - cryptobot-network

  requester:
    image: cryptobot/requester:dev
    container_name: c-requester
    build:
      context: .
      dockerfile: ./requester/Dockerfile
    environment:
      MYSQL_HOST_KLINES: db
      MYSQL_USER_KLINES: root
      MYSQL_DATABASE_KLINES: klines_history
      MYSQL_PASSWORD_KLINES: password
      MYSQL_HOST_PREDICTIONS: db
      MYSQL_USER_PREDICTIONS: root
      MYSQL_DATABASE_PREDICTIONS: klines_history
      MYSQL_PASSWORD_PREDICTIONS: password
      PREDICT_SERVER_HOST: model-serve:8501
      MIN_PREDICT_WINDOW: 7
    entrypoint: /bin/bash
    command:
      - -c
      - |
        cd /app
        while true
        do
            timeteps=('minutely' 'hourly' 'daily' 'weekly')
            for TIMESTEP in $${timeteps[*]}
            do
                TIMESTEP=$$TIMESTEP ./entrypoint.sh
            done
            sleep 60
        done
    depends_on:
      wait-for-db:
        condition: service_completed_successfully
      wait-model-serve:
        condition: service_completed_successfully
    volumes:
      - ./requester:/app
    networks:
      - cryptobot-network

  web-api:
    image: cryptobot/web-api:dev
    container_name: c-web-api
    build:
      context: .
      dockerfile: ./web_api/Dockerfile
    environment:
      MYSQL_HOST_PREDICTIONS: db
      MYSQL_USER_PREDICTIONS: root
      MYSQL_DATABASE_PREDICTIONS: klines_history
      MYSQL_PASSWORD_PREDICTIONS: password
    entrypoint: uvicorn
    command: main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    volumes:
      - ./web_api:/app
    networks:
      - cryptobot-network
    depends_on:
      wait-for-db:
        condition: service_completed_successfully

  airflow:
    image: apache/airflow:2.7.1
    command: standalone
    container_name: c-airflow
    ports:
      - 8080:8080
    environment:
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__API__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth"
      AIRFLOW__SMTP__SMTP_HOST: "smtp.gmail.com"
      AIRFLOW__SMTP__SMTP_PORT: 587
      AIRFLOW__SMTP__SMTP_USER: "de.airflow@gmail.com"
      AIRFLOW__SMTP__SMTP_PASSWORD: "cfsrvkongsobheta"
      AIRFLOW__SMTP__SMTP_MAIL_FROM: "de.airflow@gmail.com"
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
      MYSQL_HOST_PREDICTIONS: db
      MYSQL_USER_PREDICTIONS: root
      MYSQL_PASSWORD_PREDICTIONS: password
      MYSQL_DATABASE_PREDICTIONS: klines_history
      PREDICT_SERVER_HOST: model-serve:8051
      WEB_API_HOST: web-api
    depends_on:
      wait-for-db:
        condition: service_completed_successfully
      wait-model-serve:
        condition: service_completed_successfully
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}"
    networks:
      - cryptobot-network

volumes:
  klines-data:
    name: klines-data
  model_fit:
    name: model_fit

networks:
  cryptobot-network:
    external: false