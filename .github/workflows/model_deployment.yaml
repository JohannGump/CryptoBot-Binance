name: model-deployment
on:
  repository_dispatch:
    types:
      - fit-models
jobs:

  train-model:
    name: Train models
    runs-on: ubuntu-latest
    services:
      database:
        image: mysql:8.1.0
        ports:
          - 3306:3306
        env:
          MYSQL_DATABASE: klines_history
          MYSQL_ROOT_PASSWORD: password
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            binance_bridge/requirements.txt
            data/requirements.txt

      - run: pip install -r binance_bridge/requirements.txt -r data/requirements.txt 

      - name: Loads training data
        env:
          KLINESDB_HOST: localhost
          KLINESDB_USER: root
          KLINESDB_PASSWORD: password
          KLINESDB_DBNAME: klines_history
          KLINES_MAX_RECORDS_PER_SYTS: ${{ github.event.max_samples_fit || 5000 }}
        run: |
          python data/build_history.py

      - name: Fit models
        run: |
          docker run --rm \
          --network ${{ job.container.network }} \
          -v /model_fit:/src/model_fit \
          -e KLINESDB_HOST=database \
          -e KLINESDB_USER=root \
          -e KLINESDB_PASSWORD=password \
          -e KLINESDB_DBNAME=klines_history \
          ${{ secrets.DOCKER_HUB_USER }}/model-fit:latest

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: models.${{ github.sha }}
          path: /model_fit

  package-model:
    name: TFS embedding
    needs: train-model
    runs-on: ubuntu-latest
    outputs:
        minor-version: ${{ steps.minor-version.outputs.value }}
    steps:

      - id: minor-version
        run: echo "value=$(date +'%y%m%d%H%M')" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: models.${{ github.sha }}
          path: models

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build & push model-serve
        uses: docker/build-push-action@v4
        with:
          context: .
          file: model/Dockerfile.model-serve
          build-args: |
            MODEL_SRC=models
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USER }}/model-serve:${{ github.sha }}.${{ steps.minor-version.outputs.value }}
            ${{ secrets.DOCKER_HUB_USER }}/model-serve:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USER }}/model-serve:latest
          cache-to: type=inline

  roll-update-models:
    name: Rolling update models
    needs: [package-model]
    runs-on: ubuntu-latest
    steps:

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        install-missing-components: true

    - name: Apply rolling update
      run: |
        echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml
        kubectl set image deployments/c-predict c-predict=${{ secrets.DOCKER_HUB_USER }}/model-serve:${{ github.sha }}.${{ needs.package-model.outputs.minor-version }}